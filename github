~ CONFIGURE TOOLING ~
Configure user information for all local repositories

# Sets the name you want attached to your commit transactions
$ git config --global user.name "[name]"

# Sets the email you want attached to your commit transactions
$ git config --global user.email "[email address]"

# Enables helpful colorization of command line output
$ git config --global color.ui auto


CREATE REPOSITORIES
Start a new repository or obtain one from an existing URL

# Creates a new local repository with the specified name
$ git init [project-name]

# Downloads a project and its entire version history
$ git clone [url]


~ MAKE CHANGES ~
Review edits and craft a commit transaction

# Lists all new or modified files to be committed
$ git status

Snapshots the file in preparation for versioning
$ git add [file]

# Unstages the file, but preserve its contents
$ git reset [file]

# Shows file differences not yet staged
$ git diff

# Shows file differences between staging and the last file version
$ git diff --staged

# Records file snapshots permanently in version history
$ git commit -m "[descriptive message]"


~ GROUP CHANGES ~
Name a series of commits and combine completed efforts

# Lists all local branches in the current repository
$ git branch

# Creates a new branch
$ git branch [branch-name]

# Switches to the specified branch and updates the working directory
$ git checkout [branch-name]

# Combines the specified branch’s history into the current branch
$ git merge [branch]

# Deletes the specified branch
$ git branch -d [branch-na


~ SYNCHRONIZE CHANGES ~
Register a repository bookmark and exchange version history

# Downloads all history from the repository bookmark
$ git fetch [bookmark]

# Combines bookmark’s branch into current local branch
$ git merge [bookmark]/[branch]

# Uploads all local branch commits to GitHub
$ git push [alias] [branch]

# Downloads bookmark history and incorporates changes
$ git pull

